[{"fullname": "cmajortransposition", "modulename": "cmajortransposition", "qualname": "", "type": "module", "doc": "<p>Initialization of c-major-transposition</p>\n"}, {"fullname": "cmajortransposition.notetools", "modulename": "cmajortransposition.notetools", "qualname": "", "type": "module", "doc": "<p>Tools for operations relative to musical notes</p>\n"}, {"fullname": "cmajortransposition.notetools.get_c_major_notes", "modulename": "cmajortransposition.notetools", "qualname": "get_c_major_notes", "type": "function", "doc": "<p>Return a list of the integers corresponding to the C-major notes</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list\n    List of the integers representing the non accidentals notes</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "cmajortransposition.notetools.get_name_and_octave", "modulename": "cmajortransposition.notetools", "qualname": "get_name_and_octave", "type": "function", "doc": "<p>Retrieve the note name and the octave corresponding to an integer\nrepresenting a note</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>note: int\n    The integer representing the note</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    A dictionary presenting the following format:\n    {\n        \"name\": \"C\",\n        \"octave\": 2\n    }</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the parameter does not present a correct format.</p>\n", "parameters": ["note"], "funcdef": "def"}, {"fullname": "cmajortransposition.sheetmusic", "modulename": "cmajortransposition.sheetmusic", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "cmajortransposition.sheetmusic.SheetMusic", "modulename": "cmajortransposition.sheetmusic", "qualname": "SheetMusic", "type": "class", "doc": "<p>A sheet music is a sequence of different notes</p>\n\n<h2 id=\"methods\">Methods</h2>\n\n<p>__init__(self,notes=[])\n    Initialize the class</p>\n\n<p>get_notes_as_int(self)\n    Get the notes as a list of integers</p>\n\n<p>get_notes_as_str(self)\n    Get the notes as a list of strings</p>\n\n<p>set_notes(self, new_notes)\n    Modify all the notes of the sheet music</p>\n\n<p>is_transposable_in_c_major(self)\n    Check if the sheet music is transposable in C major (ie with no accidental)</p>\n\n<p>transpose_in_c_major(self)\n    Transpose the sheet music in C major if it is possible</p>\n\n<p>get_transposition_in_c_major_description(self)\n    Check if the sheet music is transposable in C major (ie with no accidental),\n    and if it is, return the number of tones to add</p>\n\n<p>def get_transposition_in_c_major_description_helper(self, notes, tones_added=0)\n    Helper to check if the sheet music is transposable in C major\n    (ie with no accidental), and if it is, return the number of tone to add</p>\n"}, {"fullname": "cmajortransposition.sheetmusic.SheetMusic.__init__", "modulename": "cmajortransposition.sheetmusic", "qualname": "SheetMusic.__init__", "type": "function", "doc": "<p>Initialize a new SheetMusic</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>notes: list, optional\n    A sequence of int representing the different notes of the sheet music.\n    Its default value is an empty list, representing an empty sheet music.</p>\n\n<pre><code>Currently, the project is focused on the different tones of the notes,\nand not the rhythm. Thus, notes are only defined by their tones.\n\nIn the common Western music, each octave can be divided into 12 tones.\nBased on this twelve-tone equal temperament, each tone of this program\nis represented by an integer.\nThus, the following equivalences have been set up:\n\n|  Notes  |  Related integer  |\n| ------- | ----------------- |\n| C       | 0                 |\n| C# / Db | 1                 |\n| D       | 2                 |\n| D# / Eb | 3                 |\n| E       | 4                 |\n| F       | 5                 |\n| F# / Gb | 6                 |\n| G       | 7                 |\n| G# / Ab | 8                 |\n| A       | 9                 |\n| A# / Bb | 10                |\n| B       | 11                |\n\nLower or upper integers can represent notes of another octave,\nlower or higher than the octave of reference.\n\nExamples\n---------\nThe C note of the octave above the octave of reference is annotated `C(1)`\nand corresponds to the integer `12`.\nThe C note of the octave below the octave of reference is annotated `C(-1)`\nand corresponds to the integer `-12`.\n</code></pre>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the parameter does not present a correct format.</p>\n", "parameters": ["self", "notes"], "funcdef": "def"}, {"fullname": "cmajortransposition.sheetmusic.SheetMusic.get_notes_as_int", "modulename": "cmajortransposition.sheetmusic", "qualname": "SheetMusic.get_notes_as_int", "type": "function", "doc": "<p>Get the notes as a list of integers</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list\n    A sequence of int representing the different notes of the sheet music.</p>\n\n<pre><code>Examples\n--------\nC corresponds to the int 1, C# to 2, D to 3, etc.\n</code></pre>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "cmajortransposition.sheetmusic.SheetMusic.get_notes_as_str", "modulename": "cmajortransposition.sheetmusic", "qualname": "SheetMusic.get_notes_as_str", "type": "function", "doc": "<p>Get the notes as a list of strings</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list\n    A sequence of string representing the different notes of the sheet music.\n    If the note is not contained in the reference octave,\n    an octave number is added between parenthesis.</p>\n\n<pre><code>Examples\n--------\nC# is written C#/Db.\nC(-1) is the C key of the octave below.\n</code></pre>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "cmajortransposition.sheetmusic.SheetMusic.set_notes", "modulename": "cmajortransposition.sheetmusic", "qualname": "SheetMusic.set_notes", "type": "function", "doc": "<p>Modify all the notes of the sheet music</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>new_notes: list\n    A list of int representing the new notes of the sheet music</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the parameter does not present a correct format.</p>\n", "parameters": ["self", "new_notes"], "funcdef": "def"}, {"fullname": "cmajortransposition.sheetmusic.SheetMusic.is_transposable_in_c_major", "modulename": "cmajortransposition.sheetmusic", "qualname": "SheetMusic.is_transposable_in_c_major", "type": "function", "doc": "<p>Check if the sheet music is transposable in C major (ie with no accidental)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    Whether or not it is transposable:\n    True if it is\n    False if it is not</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "cmajortransposition.sheetmusic.SheetMusic.transpose_in_c_major", "modulename": "cmajortransposition.sheetmusic", "qualname": "SheetMusic.transpose_in_c_major", "type": "function", "doc": "<p>Transpose the sheet music in C major if it is possible</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>list\n    A list of integers representing notes: the transposed sheet music if\n    the latter is transposable, the original sheet music otherwise</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "cmajortransposition.sheetmusic.SheetMusic.get_transposition_in_c_major_description", "modulename": "cmajortransposition.sheetmusic", "qualname": "SheetMusic.get_transposition_in_c_major_description", "type": "function", "doc": "<p>Check if the sheet music is transposable in C major (ie with no accidental),\nand if it is, return the number of tones to add</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    A dictionary presenting the following format:\n    {\n        \"transposable\": True,\n        \"tones_added\": 3\n    }</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "cmajortransposition.sheetmusic.SheetMusic.get_transposition_in_c_major_description_helper", "modulename": "cmajortransposition.sheetmusic", "qualname": "SheetMusic.get_transposition_in_c_major_description_helper", "type": "function", "doc": "<p>Helper to check if the sheet music is transposable in C major\n(ie with no accidental), and if it is, return the number of tone to add</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>notes: set\n    A set of notes to transpose</p>\n\n<p>tones_added: int\n    Number of tones to try to add to each note in order to transpose\n    the sheet music in C major (Default: 0)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    A dictionary presenting the following format:\n    {\n        \"transposable\": True,\n        \"tones_added\": 3\n    }\n    (In this one, for instance, 3 tones are added to the notes to\n    transpose the sheet music in C major)</p>\n\n<pre><code>If the transposition is impossible, the returned dictionary is:\n{\n    \"transposable\": False,\n    \"tones_added\": 0\n}\n</code></pre>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the parameter does not present a correct format.</p>\n", "parameters": ["self", "notes", "tones_added"], "funcdef": "def"}]